<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="anlzou.com.mapper.SysUserMapper" >
<!--2、使用 resultMap 配置一对一映射。-->
  <resultMap id="UserRoleMap" type="anlzou.com.entity.SysUser" extends="BaseResultMap">
    <id column="role_id" property="role.id" jdbcType="BIGINT" />
    <result column="role_name" property="role.roleName" jdbcType="VARCHAR" />
    <result column="enabled" property="role.enabled" jdbcType="INTEGER" />
    <result column="create_by" property="role.createBy" jdbcType="BIGINT" />
    <result column="role_create_time" property="role.createTime" jdbcType="TIMESTAMP" />
  </resultMap>
<!-- 3、使用resultMap的association。 标签配置一对一关系 -->
  <resultMap id="UserRoleMapa" type="anlzou.com.entity.SysUser" extends="BaseResultMap">
    <association property="role" javaType="anlzou.com.entity.SysRole" columnPrefix="role_">
      <id column="id" property="id" jdbcType="BIGINT" />
      <result column="role_Name" property="roleName" jdbcType="VARCHAR" />
      <result column="enabled" property="enabled" jdbcType="INTEGER" />
      <result column="create_by" property="createBy" jdbcType="BIGINT" />
      <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    </association>
  </resultMap>
  <!-- 上面的简化版 -->
  <resultMap id="UserRoleMapb" type="anlzou.com.entity.SysUser" extends="BaseResultMap">
    <association property="role" javaType="anlzou.com.entity.SysRole" columnPrefix="role_" resultMap="anlzou.com.mapper.SysRoleMapper.BaseResultMap"></association>
  </resultMap>
<!-- 代码生成器生成的 -->
  <resultMap id="BaseResultMap" type="anlzou.com.entity.SysUser" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_password" property="userPassword" jdbcType="VARCHAR" />
    <result column="user_email" property="userEmail" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="anlzou.com.entity.SysUserWithBLOBs" extends="BaseResultMap" >
    <result column="user_info" property="userInfo" jdbcType="LONGVARCHAR" />
    <result column="head_img" property="headImg" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_name, user_password, user_email, create_time
  </sql>
  <sql id="Blob_Column_List" >
    user_info, head_img
  </sql>

<!--  1、使用自动映射处理一对一关系。 -->
  <select id="selectUsersRole" resultType="anlzou.com.entity.SysUser" parameterType="long">
    select
        u.id,
        u.user_name userName,
        u.user_password userPassword,
        u.user_email userEmail,
        u.create_time createTime,
        r.id "role.id",
        r.role_name "role.roleName",
        r.enabled "role.enabled",
        r.create_by "role.create_by",
        r.create_time "role.create_time"
      from sys_user u
      inner join sys_user_role ur on u.id = ur.user_id
      inner join sys_role r on ur.role_id = r.id
      where u.id = #{id}
</select>
<!-- 2、使用 resultMap 配置一对一映射。 -->
  <select id="selectUsersRoleb"  resultMap="UserRoleMap">
    select
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.create_time,
        r.id role_id,
        r.role_name,
        r.enabled,
        r.create_by,
        r.create_time role_create_time
      from sys_user u
      inner join sys_user_role ur on u.id = ur.user_id
      inner join sys_role r on ur.role_id = r.id
      where u.id = #{id}
    </select>
<!-- 3、使用resultMap的association。 标签配置一对一关系 -->
  <select id="selectUsersRolec"  resultMap="UserRoleMapa">
    select
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.create_time,
        r.id role_id,
        r.role_name  role_role_name,
        r.enabled  role_enabled,
        r.create_by  role_create_by,
        r.create_time  role_create_time
      from sys_user u
      inner join sys_user_role ur on u.id = ur.user_id
      inner join sys_role r on ur.role_id = r.id
      where u.id = #{id}
    </select>

  <select id="selectUsersRoled" resultMap="UserRoleMapb">
    select
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.create_time,
        r.id role_id,
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time  role_create_time
      from sys_user u
      inner join sys_user_role ur on u.id = ur.user_id
      inner join sys_role r on ur.role_id = r.id
      where u.id = #{id}
</select>

  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="anlzou.com.entity.SysUserWithBLOBs" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_user (user_name, user_password, user_email, 
      create_time, user_info, head_img
      )
    values (#{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}, #{userEmail,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{userInfo,jdbcType=LONGVARCHAR}, #{headImg,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="anlzou.com.entity.SysUserWithBLOBs" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userPassword != null" >
        user_password,
      </if>
      <if test="userEmail != null" >
        user_email,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="userInfo != null" >
        user_info,
      </if>
      <if test="headImg != null" >
        head_img,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null" >
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userInfo != null" >
        #{userInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="headImg != null" >
        #{headImg,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="anlzou.com.entity.SysUserWithBLOBs" >
    update sys_user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        user_password = #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null" >
        user_email = #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userInfo != null" >
        user_info = #{userInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="headImg != null" >
        head_img = #{headImg,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="anlzou.com.entity.SysUserWithBLOBs" >
    update sys_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      user_info = #{userInfo,jdbcType=LONGVARCHAR},
      head_img = #{headImg,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="anlzou.com.entity.SysUser" >
    update sys_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>